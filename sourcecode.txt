<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: "Arial", sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: linear-gradient(
        to bottom right,
        #e1ded7,
        #9bafc8
      );
    }

    .wrapper {
      text-align: center;
    }

    .container {
      background: linear-gradient(
        to bottom right,
        #9bafc8,
        #e1ded7
      );
      color: #333;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 300px; /* Adjust the width as needed */
    }

    input {
      padding: 8px;
      margin-right: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 14px;
    }

    .action-button {
      padding: 8px 16px;
      background: linear-gradient(
        to bottom right,
        #1e4d6c,
        #15334f
      );
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      margin: 8px;
    }

    ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    li {
      margin: 8px 0;
      padding: 8px;
      background: linear-gradient(
        to bottom right,
        #b4c1c6,
        #8fa3ae
      );
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .checkbox {
      margin-left: 8px;
      color: #333;
    }

    .task-text {
      flex-grow: 1;
    }

    h1 {
      color: #333;
    }

    .action-button:hover {
      background: linear-gradient(
        to bottom right,
        #15334f,
        #0e1f33
      );
    }

    .action-button:active {
      background: linear-gradient(
        to bottom right,
        #0e1f33,
        #091724
      );
    }

    li:hover {
      background: linear-gradient(
        to bottom right,
        #8fa3ae,
        #6b8993
      );
      transition: background 0.3s;
    }
  </style>
  <title>To-Do List</title>
</head>
<body>
  <div class="wrapper">
    <div class="container">
      <h1>To-Do List</h1>
      <input type="text" id="taskInput" placeholder="Add a task...">
      <button onclick="addTask()" class="action-button">Add Task</button>

      <div class="button-container">
        <button onclick="filterTasks('all')" class="action-button">All</button>
        <button onclick="filterTasks('active')" class="action-button">Active</button>
        <button onclick="filterTasks('completed')" class="action-button">Completed</button>
        <button onclick="removeTasks()" class="action-button">Remove</button>
      </div>

      <ul id="taskList"></ul>

      <script>
        var tasks = [];

        function addTask() {
          var taskInput = document.getElementById("taskInput");

          if (taskInput.value.trim() === "") {
            alert("Please enter a task.");
            return;
          }

          var task = {
            text: taskInput.value,
            completed: false,
          };

          tasks.push(task);

          renderTasks();
          // Clear the input field after adding a task
          taskInput.value = "";
        }

        function renderTasks(filteredTasks) {
          var taskList = document.getElementById("taskList");
          taskList.innerHTML = "";

          var tasksToRender = filteredTasks || tasks;

          tasksToRender.forEach(function (task, index) {
            var li = document.createElement("li");
            li.classList.add("task-item");

            var checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.classList.add("checkbox");
            checkbox.checked = task.completed;
            checkbox.addEventListener("change", function () {
              updateTaskStatus(index);
            });

            var taskText = document.createElement("span");
            taskText.textContent = task.text;
            if (task.completed) {
              li.style.textDecoration = "line-through";
            }

            li.appendChild(checkbox);
            li.appendChild(taskText);

            taskList.appendChild(li);
          });
        }

        function updateTaskStatus(index) {
          tasks[index].completed = !tasks[index].completed;
          renderTasks();
        }

        function filterTasks(filterType) {
          var filteredTasks = [];

          switch (filterType) {
            case "all":
              filteredTasks = tasks;
              break;
            case "active":
              filteredTasks = tasks.filter((task) => !task.completed);
              break;
            case "completed":
              filteredTasks = tasks.filter((task) => task.completed);
              break;
            default:
              filteredTasks = tasks;
              break;
          }

          renderTasks(filteredTasks);
        }

        function removeTasks() {
          tasks = tasks.filter((task) => !task.completed);
          renderTasks();
        }
      </script>
    </div>
  </div>
</body>
</html>
